" Include .vim directory in dotfile folder to avoid symlinking it
" MUST BE CALLED before Plug-section so runtimepath is properly set for
" vim-plug
exe 'set rtp+=' . expand('{{environment.dotfile_folder}}/vim/.vim')

call plug#begin('{{environment.dotfile_folder}}/vim/.vim/plugged')
Plug 'junegunn/vim-easy-align'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'lilydjwg/colorizer'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'wellle/targets.vim'
Plug 'rhysd/clever-f.vim'
Plug 'dense-analysis/ale'
Plug '{{fzf.home_directory}}'
Plug 'junegunn/fzf.vim'
Plug 'machakann/vim-highlightedyank'
if has('python3')
	Plug 'SirVer/ultisnips'
	Plug 'honza/vim-snippets'
	Plug 'puremourning/vimspector'
endif
call plug#end()

" Airline setup
let g:airline_left_sep = 'î‚°'
let g:airline_right_sep = 'î‚²'

" Disable ALE as its sign column shifts characters some times
" Disable until fixed an further investigated
let g:ale_enabled = 0

" Change ALEs display symbols
let g:ale_sign_warning ='ðŸž„'
let g:ale_sign_error ='â¬¤'

" Show hints from LSPs too
let g:ale_lsp_suggestions = 1

" set up proper linters
let g:ale_linters = {
			\ 'rust': ['analyzer']
			\}

let g:ale_fixers = {
			\ 'rust': ['rustfmt'],
			 \ '*': ['remove_trailing_lines', 'trim_whitespace']
			 \}

let g:ale_fix_on_save = 1

" Unbind this as per default it is bound to <Tab> which conflicts with auto
" completion
let g:UltiSnipsExpandTrigger = '<Nop>'


" Align visual selection
xmap ga <Plug>(EasyAlign)

" Update termcaps sent by Alt-key
execute "set <A-j>=\ej"
execute "set <A-k>=\ek"

" Move lines up and down
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
vnoremap <A-k> :m '<-2<CR>gv=gv
vnoremap <A-j> :m '>+1<CR>gv=gv

function! SnippetExpandOrJump() abort
	if has_key(g:plugs,"ultisnips")
		call UltiSnips#ExpandSnippetOrJump()
		return g:ulti_expand_or_jump_res > 0
	endif
	return 0
endfunction


" Shamelessly stolen from https://stackoverflow.com/a/61275100
function! HandleTab() abort
	" Check if we're in a completion menu
	if pumvisible()
		return "\<C-n>"
	endif
	if SnippetExpandOrJump()
		return ""
	endif
	" Then check if we're indenting.
	let col = col('.') - 1
	if !col || getline('.')[col - 1] =~ '\s'
		return "\<Tab>"
	endif
	"TODO Trigger  completion here
	return "\<Tab>"
endfunction

inoremap <silent> <Tab> <C-R>=HandleTab()<CR>
inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
inoremap <expr> <Enter> pumvisible() ? "\<C-y>" : "\<Enter>"
inoremap <expr> <ESC> pumvisible() ? "\<C-e>" : "\<ESC>"

" Map <Ctrl-S> to saving the current open document
noremap <C-s> <ESC>:w<CR>

" Call plugin configurations from different files
runtime plugged/plugins.vim


" Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.

colorscheme updated-default


" Try to prevent bad habits like using the arrow keys for movement. This is
" not the only possible bad habit. For example, holding down the h/j/k/l keys
" for movement, rather than using more efficient movement commands, is also a
" bad habit. The former is enforceable through a .vimrc, while we don't know
" how to prevent the latter.
" Do this in normal mode...
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>
" ...and in insert mode
inoremap <Left>  <ESC>:echoe "Use h"<CR>
inoremap <Right> <ESC>:echoe "Use l"<CR>
inoremap <Up>    <ESC>:echoe "Use k"<CR>
inoremap <Down>  <ESC>:echoe "Use j"<CR>
