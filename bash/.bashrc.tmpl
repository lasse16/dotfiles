# Set $DOTFILES_BASH environment variables if not already set
export DOTFILES_BASH=${DOTFILES_BASH:=$DOTFILES/bash}

# Source helpers
source "$DOTFILES_BASH/helpers/pathadd.bash"
source "$DOTFILES_BASH/helpers/source_dotenv.sh"
source "$DOTFILES_BASH/helpers/authenticate-jira.bash"
source "$DOTFILES_BASH/commands/env.sh"
source "$DOTFILES_BASH/commands/nix.sh"
source "$DOTFILES_BASH/aliases/wsl_aliases.sh"
source "$DOTFILES_BASH/aliases/nix_aliases.sh"
source "$DOTFILES_BASH/keybindings.sh"

# Add script folder to path
pathadd "$DOTFILES_BASH/scripts/path-additions/"

# If not running interactively, don't do anything
case $- in
  *i*) ;;
  *) return;;
esac

# disable <C-s> stopping data flow to the terminal
stty -ixon

# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  #alias dir='dir --color=auto'
  #alias vdir='vdir --color=auto'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'

    # Change the background color for writable and sticky directories
    # Currently green and nord theme are working together to make it unreadable
    LS_COLORS="${LS_COLORS}tw=30:ow=34:"
    export LS_COLORS
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
FILE="$DOTFILES_BASH/aliases/bash_aliases" && test -f $FILE && source $FILE

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi



{{#if dotter.packages.ssh}}
# Start SSH Agent
SSH_ENV="$HOME/.ssh/environment"
if [ -f "$DOTFILES_BASH/helpers/ssh_agent.sh" ] ; then
  source "$DOTFILES_BASH/helpers/ssh_agent.sh"
  if [ -f "${SSH_ENV}" ]; then
    run_ssh_env;
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
      start_ssh_agent;
          add_ssh_keys;
        }
    else
      start_ssh_agent;
  fi
fi

{{/if}}

{{#if dotter.packages.gpg}}
export GPG_TTY=$(tty)
{{/if}}

{{#if dotter.packages.direnv}}
# Hook up direnv to
eval "$(direnv hook bash)"
{{/if}}

{{#if dotter.packages.fzf}}
source "$DOTFILES/fzf/fzf_setup.sh"
{{/if}}

{{#if dotter.packages.go}}
export PATH=$PATH:/usr/local/go/bin:~/go/bin
export GOPATH=$HOME/go
{{/if}}

{{#if dotter.packages.starship}}
# Enable starship
export STARSHIP_CONFIG="/home/lasse/.config/starship/starship.toml"
eval "$(starship init bash)"

{{else}}

#include git branch in prompt
parse_git_branch(){
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

show_virtual_env(){
  if [[ -n "$VIRTUAL_ENV" && -n "$DIRENV_DIR" ]]; then
    echo "($(basename $VIRTUAL_ENV))"
  fi
}

export -f parse_git_branch
export -f show_virtual_env
export PS1="\$(show_virtual_env) \u@\h \[\033[32m\]\w\[\033[33m\] \$(parse_git_branch)\n \[\033[00m\]$ "

{{/if}}

complete -C "/usr/bin/env terraform" terraform

export FORGIT_COPY_CMD="win32yank.exe -i"

{{#if dotter.packages.git}}
pathadd "$DOTFILES/git/helpers"
{{/if}}

pathadd "$DOTFILES_BASH/helpers/curl_cache"
