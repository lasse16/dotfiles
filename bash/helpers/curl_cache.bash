#!/usr/bin/env bash
# This script was generated by bashly 1.2.6 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  #!/usr/bin/env bash

  url=${args[url]}
  verbose=${args[--verbose]}
  expire_age=${args[--expiration-time]}
  force=${args[--force]}

  __log ()
  {
  	[[ $verbose ]] && echo "[DEBUG] $*"
  }

  cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/curl"
  __log "Cache directory = $cache_dir"

  cache_name=$(echo -n "$url" | md5sum | awk '{print $1}')
  mkdir -p "$cache_dir"

  cache_file="$cache_dir/$cache_name"
  __log "Cache file = $cache_file"

  # Check if cached file exists and is fresh enough
  if ! [ $force ] && [ -f "$cache_file" ] && [ $(($(date +%s) - $(stat -c %Y "$cache_file"))) -lt $expire_age ]; then
      __log "Cache hit at [$cache_file]"
      cat "$cache_file"
  else
      # Download and cache with curl
      __log "Cache miss"
      __log "Running new request for [ $url ]"
      curl -sSfL "$url" > "$cache_file.tmp" && mv "$cache_file.tmp" "$cache_file"
      cat "$cache_file"
  fi

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
curl_cache_usage() {
  printf "curl_cache - A curl wrapper that stores the result\n\n"

  printf "%s\n" "Usage:"
  printf "  curl_cache URL [OPTIONS]\n"
  printf "  curl_cache --help | -h\n"
  printf "  curl_cache --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--force, -f"
    printf "    Force request despite of cache\n"
    echo

    # :flag.usage
    printf "  %s\n" "--verbose, -V"
    printf "    Enable verbose logging\n"
    echo

    # :flag.usage
    printf "  %s\n" "--expiration-time TIME"
    printf "    Time in seconds after which to invalidate the cache\n"
    printf "    %s\n" "Default: 900"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "URL"
    printf "    URL to download from\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  curl_cache wttr.in/?format=3\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        curl_cache_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      # :flag.case
      --verbose | -V)

        # :flag.case_no_arg
        args['--verbose']=1
        shift
        ;;

      # :flag.case
      --expiration-time)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--expiration-time']="$2"
          shift
          shift
        else
          printf "%s\n" "--expiration-time requires an argument: --expiration-time TIME" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['url']+x} ]]; then
          args['url']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args['url']+x} ]]; then
    printf "missing required argument: URL\nusage: curl_cache URL [OPTIONS]\n" >&2

    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--expiration-time']:-} ]] || args['--expiration-time']="900"

}

# :command.initialize
initialize() {
  version="0.4.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a other_args=()
  declare -g -a env_var_names=()
  declare -g -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
